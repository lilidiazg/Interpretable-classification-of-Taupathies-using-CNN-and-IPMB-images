{"nbformat":4,"nbformat_minor":0,"metadata":{"coursera":{"course_slug":"convolutional-neural-networks","graded_item_id":"bwbJV","launcher_item_id":"0TkXB"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.6"},"colab":{"name":"Sequential and Simple Architecture Training and 10-fold","provenance":[{"file_id":"1c6UZUJ9aVIVoE4xYeiOGISHVaYZb0nMb","timestamp":1630193138665},{"file_id":"1zmKyT7WjTrlhuIUfMescZPVJLIYejyl7","timestamp":1630105026065},{"file_id":"1zbdHV0u72H-lMTV6xSOtOhrIR5K996wR","timestamp":1630086225539}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"SQtvdkW5p3MF"},"source":["<a name='1'></a>\n","## 1 - Packages"]},{"cell_type":"code","metadata":{"id":"RSugoltrp3MG"},"source":["import math\n","import numpy as np\n","import h5py\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import imread\n","import scipy\n","from PIL import Image\n","import pandas as pd\n","import tensorflow as tf\n","import tensorflow.keras.layers as tfl\n","from tensorflow.python.framework import ops\n","#from cnn_utils import *\n","#from test_utils import summary, comparator\n","\n","%matplotlib inline\n","np.random.seed(1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"x72YOOWQuirM"},"source":["from tqdm import tqdm\n","import os\n","import cv2\n","import seaborn as sns\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint\n","from sklearn.model_selection import StratifiedKFold\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from sklearn.metrics import classification_report,confusion_matrix\n","from tensorflow.keras import layers\n","from tensorflow.keras import Model\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras import layers\n","from tensorflow.keras import Model\n","from tensorflow.keras.optimizers import RMSprop"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7-jgnvTnt28Z","executionInfo":{"status":"ok","timestamp":1633138179126,"user_tz":300,"elapsed":21445,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"0daaec6c-bb22-4c4c-f90c-1b86083323c8"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"vOrlFOkhp3MH"},"source":["##Sequential Architecture\n","\n"]},{"cell_type":"code","metadata":{"id":"JpIAioLyupRZ"},"source":["labels = ['PSP','Alzheimer']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Select either for enthorinal cortex, for hippocampus or for hippocampus and enthorinal cortex"],"metadata":{"id":"-2YxytiESd3f"}},{"cell_type":"markdown","source":["For Enthorinal Cortex model development"],"metadata":{"id":"JCigLVhgSEAw"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sjw7Ktzp5cOR","executionInfo":{"status":"ok","timestamp":1633138977372,"user_tz":300,"elapsed":780693,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"61a63587-6969-4aec-f748-1d3b290d9a4c"},"source":["X_train = []\n","y_train = []\n","image_size = 150\n","for i in labels:\n","    folderPath = os.path.join('/content/drive/MyDrive/Tesis Maestria/Dataset 31-8-21 TIF (ALZ-PSP Corteza Entorrinal2)','Training',i)\n","    for j in tqdm(os.listdir(folderPath)):\n","        img = cv2.imread(os.path.join(folderPath,j))\n","        img = cv2.resize(img,(image_size,image_size))\n","        X_train.append(img)\n","        y_train.append(i)\n","        \n","for i in labels:\n","    folderPath = os.path.join('/content/drive/MyDrive/Tesis Maestria/Dataset 31-8-21 TIF (ALZ-PSP Corteza Entorrinal2)','Testing',i)\n","    for j in tqdm(os.listdir(folderPath)):\n","        img = cv2.imread(os.path.join(folderPath,j))\n","        img = cv2.resize(img,(image_size,image_size))\n","        X_train.append(img)\n","        y_train.append(i)\n","        \n","X_train = np.array(X_train)\n","y_train = np.array(y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 252/252 [04:42<00:00,  1.12s/it]\n","100%|██████████| 328/328 [05:54<00:00,  1.08s/it]\n","100%|██████████| 57/57 [01:00<00:00,  1.06s/it]\n","100%|██████████| 65/65 [01:14<00:00,  1.15s/it]\n"]}]},{"cell_type":"markdown","source":["For Hipoccampus model development"],"metadata":{"id":"m3X41QFSSHdI"}},{"cell_type":"code","source":["X_train = []\n","y_train = []\n","image_size = 150\n","for i in labels:\n","    folderPath = os.path.join('/content/drive/MyDrive/Tesis Maestria/Dataset 31-8-21 TIF (ALZ-PSP Hipocampo2)','Training',i)\n","    for j in tqdm(os.listdir(folderPath)):\n","        img = cv2.imread(os.path.join(folderPath,j))\n","        img = cv2.resize(img,(image_size,image_size))\n","        X_train.append(img)\n","        y_train.append(i)\n","        \n","for i in labels:\n","    folderPath = os.path.join('/content/drive/MyDrive/Tesis Maestria/Dataset 31-8-21 TIF (ALZ-PSP Hipocampo2)','Testing',i)\n","    for j in tqdm(os.listdir(folderPath)):\n","        img = cv2.imread(os.path.join(folderPath,j))\n","        img = cv2.resize(img,(image_size,image_size))\n","        X_train.append(img)\n","        y_train.append(i)\n","        \n","X_train = np.array(X_train)\n","y_train = np.array(y_train)"],"metadata":{"id":"gOv0499MSax5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["For Hippocampus and Enthorinal Cortex model development"],"metadata":{"id":"Zb2NxMS0SNRu"}},{"cell_type":"code","source":["X_train = []\n","y_train = []\n","image_size = 150\n","for i in labels:\n","    folderPath = os.path.join('/content/drive/MyDrive/Tesis Maestria/Dataset 14-9-21 TIF (ALZ-PSP clases) Hipocampo y Corteza Entorrinal','Training',i)\n","    for j in tqdm(os.listdir(folderPath)):\n","        img = cv2.imread(os.path.join(folderPath,j))\n","        img = cv2.resize(img,(image_size,image_size))\n","        X_train.append(img)\n","        y_train.append(i)\n","        \n","for i in labels:\n","    folderPath = os.path.join('/content/drive/MyDrive/Tesis Maestria/Dataset 14-9-21 TIF (ALZ-PSP clases) Hipocampo y Corteza Entorrinal','Testing',i)\n","    for j in tqdm(os.listdir(folderPath)):\n","        img = cv2.imread(os.path.join(folderPath,j))\n","        img = cv2.resize(img,(image_size,image_size))\n","        X_train.append(img)\n","        y_train.append(i)\n","        \n","X_train = np.array(X_train)\n","y_train = np.array(y_train)"],"metadata":{"id":"5IBo42JaSKUu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RRPRrrRbBYiL"},"source":["Preprocessing the data"]},{"cell_type":"code","metadata":{"id":"JUB1t8fu5rvQ"},"source":["X_train, Y_train = shuffle(X_train,y_train, random_state=101)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4W5Md8Pss_I1","executionInfo":{"status":"ok","timestamp":1633143740256,"user_tz":300,"elapsed":275,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"83d27f1a-19e4-4f64-feca-9ccc5abb6fa5"},"source":["datagen = ImageDataGenerator(\n","    rotation_range=30,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    zoom_range=0.2,\n","    horizontal_flip=True)\n","\n","datagen.fit(X_train)\n","X_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(702, 150, 150, 3)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"pggR1shMtE6y"},"source":["X_train,X_test,y_train,y_test = train_test_split(X_train,y_train, test_size=0.1,random_state=101)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QixvZDP_tMIe"},"source":["y_train_new = []\n","for i in y_train:\n","    y_train_new.append(labels.index(i))\n","y_train = y_train_new\n","y_train = tf.keras.utils.to_categorical(y_train)\n","\n","\n","y_test_new = []\n","for i in y_test:\n","    y_test_new.append(labels.index(i))\n","y_test = y_test_new\n","y_test = tf.keras.utils.to_categorical(y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UJavsLjMp3ML","colab":{"base_uri":"https://localhost:8080/","height":269},"executionInfo":{"status":"ok","timestamp":1630707564400,"user_tz":300,"elapsed":396,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"5cf25e70-f9cf-4634-e9e1-798828e0284f"},"source":["index = 121\n","plt.imshow(X_train[index]) #display sample training image\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7LKxNBh_8yAq","executionInfo":{"status":"ok","timestamp":1630728762309,"user_tz":300,"elapsed":138,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"794f6ba0-7621-4395-8000-5b93efb81771"},"source":["print (\"number of training examples = \" + str(X_train.shape[0]))\n","print (\"number of test examples = \" + str(X_test.shape[0]))\n","print (\"X_train shape: \" + str(X_train.shape))\n","print (\"Y_train shape: \" + str(y_train.shape))\n","print (\"X_test shape: \" + str(X_test.shape))\n","print (\"Y_test shape: \" + str(y_test.shape))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["number of training examples = 631\n","number of test examples = 71\n","X_train shape: (631, 150, 150, 3)\n","Y_train shape: (631, 2)\n","X_test shape: (71, 150, 150, 3)\n","Y_test shape: (71, 2)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"35tmMiryoe7F"},"source":["## Sequential Architecture"]},{"cell_type":"code","metadata":{"id":"tw0oL0Kq8wrX"},"source":["Xtrainn=X_train.reshape(X_train.shape[0],X_train.shape[1]*X_train.shape[2]*X_train.shape[3])\n","Xtestnn=X_test.reshape(X_test.shape[0],X_test.shape[1]*X_test.shape[2]*X_test.shape[3])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SY7Udy2Su56g","executionInfo":{"status":"ok","timestamp":1630719110922,"user_tz":300,"elapsed":23952,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"fc19c56d-6600-4c58-9c68-ce9b30d938b0"},"source":["history = model.fit(Xtrainn,y_train, epochs = 30, verbose=1, batch_size=10, validation_data=(Xtestnn,y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/30\n","64/64 [==============================] - 2s 16ms/step - loss: 8.4770 - accuracy: 0.4913 - val_loss: 6.5840 - val_accuracy: 0.4225\n","Epoch 2/30\n","64/64 [==============================] - 1s 11ms/step - loss: 2.8864 - accuracy: 0.4897 - val_loss: 1.4064 - val_accuracy: 0.4225\n","Epoch 3/30\n","64/64 [==============================] - 1s 13ms/step - loss: 0.8229 - accuracy: 0.5119 - val_loss: 1.3459 - val_accuracy: 0.5352\n","Epoch 4/30\n","64/64 [==============================] - 1s 13ms/step - loss: 0.7805 - accuracy: 0.5800 - val_loss: 1.7723 - val_accuracy: 0.5211\n","Epoch 5/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.7200 - accuracy: 0.5674 - val_loss: 2.6066 - val_accuracy: 0.5211\n","Epoch 6/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.7713 - accuracy: 0.5531 - val_loss: 1.4223 - val_accuracy: 0.5352\n","Epoch 7/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.8512 - accuracy: 0.5658 - val_loss: 1.7422 - val_accuracy: 0.5211\n","Epoch 8/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6903 - accuracy: 0.5658 - val_loss: 1.8014 - val_accuracy: 0.5352\n","Epoch 9/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6867 - accuracy: 0.5705 - val_loss: 1.7994 - val_accuracy: 0.5352\n","Epoch 10/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6862 - accuracy: 0.5737 - val_loss: 1.7981 - val_accuracy: 0.5352\n","Epoch 11/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6861 - accuracy: 0.5753 - val_loss: 1.7969 - val_accuracy: 0.5352\n","Epoch 12/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6846 - accuracy: 0.5769 - val_loss: 1.7937 - val_accuracy: 0.5352\n","Epoch 13/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6838 - accuracy: 0.5800 - val_loss: 1.7917 - val_accuracy: 0.5352\n","Epoch 14/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6825 - accuracy: 0.5880 - val_loss: 1.7887 - val_accuracy: 0.5352\n","Epoch 15/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6794 - accuracy: 0.5895 - val_loss: 1.7866 - val_accuracy: 0.5352\n","Epoch 16/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6781 - accuracy: 0.5911 - val_loss: 1.7794 - val_accuracy: 0.5352\n","Epoch 17/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6785 - accuracy: 0.5943 - val_loss: 1.7773 - val_accuracy: 0.5352\n","Epoch 18/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6765 - accuracy: 0.5943 - val_loss: 1.7821 - val_accuracy: 0.5493\n","Epoch 19/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6727 - accuracy: 0.5990 - val_loss: 1.7683 - val_accuracy: 0.5493\n","Epoch 20/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6689 - accuracy: 0.5943 - val_loss: 1.7702 - val_accuracy: 0.5352\n","Epoch 21/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6677 - accuracy: 0.6006 - val_loss: 1.7611 - val_accuracy: 0.5493\n","Epoch 22/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6748 - accuracy: 0.5943 - val_loss: 1.7725 - val_accuracy: 0.5352\n","Epoch 23/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6705 - accuracy: 0.5943 - val_loss: 1.7768 - val_accuracy: 0.5211\n","Epoch 24/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6696 - accuracy: 0.5959 - val_loss: 1.7661 - val_accuracy: 0.5352\n","Epoch 25/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6730 - accuracy: 0.5943 - val_loss: 1.7798 - val_accuracy: 0.5211\n","Epoch 26/30\n","64/64 [==============================] - 1s 12ms/step - loss: 0.6692 - accuracy: 0.5943 - val_loss: 1.7695 - val_accuracy: 0.5352\n","Epoch 27/30\n","64/64 [==============================] - 1s 13ms/step - loss: 0.6736 - accuracy: 0.5959 - val_loss: 1.8388 - val_accuracy: 0.5211\n","Epoch 28/30\n","64/64 [==============================] - 1s 13ms/step - loss: 0.6678 - accuracy: 0.5975 - val_loss: 1.8376 - val_accuracy: 0.5352\n","Epoch 29/30\n","64/64 [==============================] - 1s 13ms/step - loss: 0.6671 - accuracy: 0.5959 - val_loss: 1.8558 - val_accuracy: 0.5352\n","Epoch 30/30\n","64/64 [==============================] - 1s 11ms/step - loss: 0.6864 - accuracy: 0.5943 - val_loss: 1.8111 - val_accuracy: 0.5211\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cFwkk8N2BwXN"},"source":[" Stratified K-fold Cross validation Sequential Architecture\n"," "]},{"cell_type":"code","metadata":{"id":"33Fco3RWwU51"},"source":["kfold = StratifiedKFold(n_splits=10, shuffle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DPYjMsKBwdVs"},"source":["inputs = np.concatenate((Xtrainn, Xtestnn), axis=0)\n","targets = np.concatenate((y_train, y_test), axis=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6tfJv3vZwi8H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633144174314,"user_tz":300,"elapsed":180208,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"a65b8cd7-1f61-4ee3-d541-7d0949c39674"},"source":["cvscores = []\n","for train, test in kfold.split(inputs, targets.argmax(1)):\n","  model = Sequential()\n","  model.add(Dense(12, activation='relu', input_dim=67500))\n","  model.add(Dense(8, activation='relu'))\n","  model.add(Dense(2, activation='softmax', kernel_regularizer='l2'))\n","  model.compile(loss='categorical_crossentropy',optimizer = 'Adam', metrics= ['accuracy'])\n","  model.fit(inputs[train], targets[train],validation_split=0.1, epochs = 30, verbose=0, batch_size=10)\n","  scores = model.evaluate(inputs[test], targets[test], verbose=0)\n","  print(scores[1]*100)\n","  cvscores.append(scores[1] * 100)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["56.338030099868774\n","59.1549277305603\n","55.714285373687744\n","55.714285373687744\n","55.714285373687744\n","55.714285373687744\n","57.14285969734192\n","55.714285373687744\n","55.714285373687744\n","57.14285969734192\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5FSpKiO-aqx","executionInfo":{"status":"ok","timestamp":1633144189466,"user_tz":300,"elapsed":279,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"6b743b1f-b9cf-42db-d8f2-1ac5999a508d"},"source":["print(np.mean(cvscores))\n","print(np.std(cvscores))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["56.40643894672394\n","1.0732176303566985\n"]}]},{"cell_type":"markdown","metadata":{"id":"uuRgZ7VLCT7i"},"source":["## Simple Architecture"]},{"cell_type":"code","metadata":{"id":"sTC-Ri-aM-Ql"},"source":["img_input = layers.Input(shape=(150, 150, 3))\n","\n","\n","x = layers.Conv2D(16, 3, activation='relu',kernel_regularizer='l2')(img_input)\n","#x = layers.BatchNormalization()(x)\n","x = layers.MaxPooling2D(2)(x)\n","\n","\n","x = layers.Conv2D(32, 3, activation='relu',kernel_regularizer='l2')(x)\n","#x = layers.BatchNormalization()(x)\n","x = layers.MaxPooling2D(2)(x)\n","\n","\n","x = layers.Convolution2D(64, 3, activation='relu',kernel_regularizer='l2')(x)\n","#x = layers.BatchNormalization()(x)\n","x = layers.MaxPooling2D(2)(x)\n","\n","\n","x = layers.Flatten()(x)\n","\n","x = layers.Dense(200, activation='relu', kernel_regularizer='l2')(x)\n","\n","x = layers.Dropout(0.5)(x)\n","\n","output = layers.Dense(2, activation='softmax', kernel_regularizer='l2')(x)\n","\n","model = Model(img_input, output)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer='Adam',\n","              metrics=['acc'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89yonDT3NUWZ","executionInfo":{"status":"ok","timestamp":1630728355954,"user_tz":300,"elapsed":145,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"b9ac301d-01be-439d-d60d-b6671a7e86fb"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 150, 150, 3)]     0         \n","_________________________________________________________________\n","conv2d (Conv2D)              (None, 148, 148, 16)      448       \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 74, 74, 16)        0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 72, 72, 32)        4640      \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 36, 36, 32)        0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 34, 34, 64)        18496     \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 17, 17, 64)        0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 18496)             0         \n","_________________________________________________________________\n","dense (Dense)                (None, 200)               3699400   \n","_________________________________________________________________\n","dropout (Dropout)            (None, 200)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 2)                 402       \n","=================================================================\n","Total params: 3,723,386\n","Trainable params: 3,723,386\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mMrrsmaXcsyc"},"source":["es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\n","mc = ModelCheckpoint('SimpleArqHipocampoPSP-ALZ.h5', monitor='val_acc', mode='max', verbose=1, save_best_only=True)\n","reduce_lr = ReduceLROnPlateau(monitor = 'val_acc', factor = 0.3, patience = 3, min_delta = 0.001,\n","                              mode='auto',verbose=1)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oLHmjNhyNXcK","executionInfo":{"status":"ok","timestamp":1630728701343,"user_tz":300,"elapsed":263137,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"fc9d5e08-df2e-4b56-97dc-991b770cdbbd"},"source":["history=model.fit(X_train, y_train,validation_split=0.1, epochs=15, batch_size=10,callbacks=[reduce_lr,mc,es])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/15\n","57/57 [==============================] - 16s 261ms/step - loss: 8.4139 - acc: 0.4638 - val_loss: 3.8621 - val_acc: 0.7188\n","\n","Epoch 00001: val_acc improved from -inf to 0.71875, saving model to SimpleArqHipocampoPSP-ALZ.h5\n","Epoch 2/15\n","57/57 [==============================] - 14s 243ms/step - loss: 3.4790 - acc: 0.6578 - val_loss: 3.2071 - val_acc: 0.6250\n","\n","Epoch 00002: val_acc did not improve from 0.71875\n","Epoch 3/15\n","57/57 [==============================] - 14s 251ms/step - loss: 2.9909 - acc: 0.6614 - val_loss: 2.8527 - val_acc: 0.5781\n","\n","Epoch 00003: val_acc did not improve from 0.71875\n","Epoch 4/15\n","57/57 [==============================] - 14s 249ms/step - loss: 2.6446 - acc: 0.7160 - val_loss: 2.6346 - val_acc: 0.4844\n","\n","Epoch 00004: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00004: val_acc did not improve from 0.71875\n","Epoch 5/15\n","57/57 [==============================] - 14s 254ms/step - loss: 2.4186 - acc: 0.7831 - val_loss: 2.5647 - val_acc: 0.5469\n","\n","Epoch 00005: val_acc did not improve from 0.71875\n","Epoch 6/15\n","57/57 [==============================] - 14s 248ms/step - loss: 2.2534 - acc: 0.8025 - val_loss: 2.5444 - val_acc: 0.5000\n","\n","Epoch 00006: val_acc did not improve from 0.71875\n","Epoch 7/15\n","57/57 [==============================] - 14s 244ms/step - loss: 2.1517 - acc: 0.8166 - val_loss: 2.4720 - val_acc: 0.5469\n","\n","Epoch 00007: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00007: val_acc did not improve from 0.71875\n","Epoch 8/15\n","57/57 [==============================] - 13s 234ms/step - loss: 2.0427 - acc: 0.8325 - val_loss: 2.4752 - val_acc: 0.5000\n","\n","Epoch 00008: val_acc did not improve from 0.71875\n","Epoch 9/15\n","57/57 [==============================] - 14s 249ms/step - loss: 1.9863 - acc: 0.8536 - val_loss: 2.4838 - val_acc: 0.5625\n","\n","Epoch 00009: val_acc did not improve from 0.71875\n","Epoch 10/15\n","57/57 [==============================] - 14s 246ms/step - loss: 1.9394 - acc: 0.8765 - val_loss: 2.4466 - val_acc: 0.5625\n","\n","Epoch 00010: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00010: val_acc did not improve from 0.71875\n","Epoch 11/15\n","57/57 [==============================] - 14s 250ms/step - loss: 1.8975 - acc: 0.8889 - val_loss: 2.4455 - val_acc: 0.5625\n","\n","Epoch 00011: val_acc did not improve from 0.71875\n","Epoch 12/15\n","57/57 [==============================] - 14s 246ms/step - loss: 1.8919 - acc: 0.8818 - val_loss: 2.4508 - val_acc: 0.5312\n","\n","Epoch 00012: val_acc did not improve from 0.71875\n","Epoch 13/15\n","57/57 [==============================] - 14s 237ms/step - loss: 1.8723 - acc: 0.8959 - val_loss: 2.4377 - val_acc: 0.5625\n","\n","Epoch 00013: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","\n","Epoch 00013: val_acc did not improve from 0.71875\n","Epoch 14/15\n","57/57 [==============================] - 13s 236ms/step - loss: 1.8624 - acc: 0.8836 - val_loss: 2.4404 - val_acc: 0.5625\n","\n","Epoch 00014: val_acc did not improve from 0.71875\n","Epoch 15/15\n","57/57 [==============================] - 14s 244ms/step - loss: 1.8630 - acc: 0.8889 - val_loss: 2.4447 - val_acc: 0.5469\n","\n","Epoch 00015: val_acc did not improve from 0.71875\n"],"name":"stdout"}]},{"cell_type":"markdown","source":[" Stratified K-fold Cross validation Simple Architecture"],"metadata":{"id":"7k7R7uvjQFU4"}},{"cell_type":"code","metadata":{"id":"tBTwsrxRAbly"},"source":["inputs = np.concatenate((X_train, X_test), axis=0)\n","targets = np.concatenate((y_train, y_test), axis=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zxbfJEuQAh6L","executionInfo":{"status":"ok","timestamp":1633146961129,"user_tz":300,"elapsed":1939424,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"c96767be-623f-47b0-d416-d0fae7a7339b"},"source":["cvscores = []\n","for train, test in kfold.split(inputs, targets.argmax(1)):\n","  img_input = layers.Input(shape=(150, 150, 3))\n","  x = layers.Conv2D(16, 3, activation='relu',kernel_regularizer='l2')(img_input)\n","  x = layers.MaxPooling2D(2)(x)\n","  x = layers.Conv2D(32, 3, activation='relu',kernel_regularizer='l2')(x)\n","  x = layers.MaxPooling2D(2)(x)\n","  x = layers.Convolution2D(64, 3, activation='relu',kernel_regularizer='l2')(x)\n","  x = layers.MaxPooling2D(2)(x)\n","  x = layers.Flatten()(x)\n","  x = layers.Dense(200, activation='relu', kernel_regularizer='l2')(x)\n","  x = layers.Dropout(0.5)(x)\n","  output = layers.Dense(2, activation='softmax', kernel_regularizer='l2')(x)\n","  model = Model(img_input, output)\n","  model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['acc'])\n","  reduce_lr = ReduceLROnPlateau(monitor = 'val_acc', factor = 0.3, patience = 3, min_delta = 0.001, mode='auto',verbose=0)\n","  model.fit(inputs[train], targets[train], validation_split=0.1, epochs=15, batch_size=10, verbose=0, callbacks=[reduce_lr])\n","  scores = model.evaluate(inputs[test], targets[test], verbose=0)\n","  print(scores[1]*100)\n","  cvscores.append(scores[1] * 100)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Epoch 00004: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00007: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00010: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00013: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","53.52112650871277\n","\n","Epoch 00005: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00008: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00013: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","46.47887349128723\n","\n","Epoch 00006: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00009: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00012: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00015: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","45.71428596973419\n","\n","Epoch 00004: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00007: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00014: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","47.14285731315613\n","\n","Epoch 00004: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00007: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00010: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00013: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","52.85714268684387\n","\n","Epoch 00007: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00010: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00013: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","50.0\n","\n","Epoch 00005: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00009: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00012: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00015: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","55.714285373687744\n","\n","Epoch 00005: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00008: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00011: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00014: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","55.714285373687744\n","\n","Epoch 00006: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00009: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00012: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00015: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","64.28571343421936\n","\n","Epoch 00006: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n","\n","Epoch 00009: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n","\n","Epoch 00012: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n","\n","Epoch 00015: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n","62.85714507102966\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ftSEgVQVJH2P","executionInfo":{"status":"ok","timestamp":1633146966528,"user_tz":300,"elapsed":276,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15724017853417570220"}},"outputId":"fde2e5d5-5ae2-4d31-9e10-40872f8f6b51"},"source":["print(np.mean(cvscores))\n","print(np.std(cvscores))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["53.42857152223587\n","6.137046624648218\n"]}]},{"cell_type":"markdown","metadata":{"id":"dC3P8H68C4-g"},"source":["## Model evaluation for Sequential and Simple Architecture"]},{"cell_type":"code","metadata":{"id":"zA8bTg8Rp3MS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630728788934,"user_tz":300,"elapsed":793,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"b05ae57b-c4b1-4f88-c5ac-e7ac6a45562e"},"source":["model.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3/3 [==============================] - 0s 132ms/step - loss: 2.5616 - acc: 0.6056\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[2.5616378784179688, 0.6056337952613831]"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"jGafRKtbtHwX"},"source":["pred = model.predict(X_test)\n","pred = np.argmax(pred,axis=1)\n","y_test_new = np.argmax(y_test,axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zXrV3-batb68","executionInfo":{"status":"ok","timestamp":1630728818984,"user_tz":300,"elapsed":145,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"94ccb884-6e29-4590-a2aa-4008c622e91c"},"source":["print(classification_report(y_test_new,pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.57      0.53      0.55        32\n","           1       0.63      0.67      0.65        39\n","\n","    accuracy                           0.61        71\n","   macro avg       0.60      0.60      0.60        71\n","weighted avg       0.60      0.61      0.60        71\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"15m28ly3tyCr"},"source":["colors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\n","colors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\n","colors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"-sD2LGGYtmp_","executionInfo":{"status":"ok","timestamp":1630728824644,"user_tz":300,"elapsed":382,"user":{"displayName":"Liliana Díaz Gómez","photoUrl":"","userId":"15724017853417570220"}},"outputId":"14495a4e-38eb-41b2-c2dc-ba1bccc112bf"},"source":["fig,ax=plt.subplots(1,1,figsize=(14,7))\n","sns.heatmap(confusion_matrix(y_test_new,pred),ax=ax,xticklabels=['PSP', 'Alzheimer'],yticklabels=['PSP', 'Alzheimer'],annot=True,\n","           cmap=colors_green[::-1],alpha=0.7,linewidths=2,linecolor=colors_dark[3])\n","fig.text(s='Heatmap of the Confusion Matrix',size=18,fontweight='bold',\n","             fontname='monospace',color=colors_dark[1],y=0.92,x=0.28,alpha=0.8)\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1008x504 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]}]}